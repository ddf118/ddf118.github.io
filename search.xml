<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>hexo的图片及超链接玩法</title>
      <link href="/2019/01/03/hexofun/"/>
      <url>/2019/01/03/hexofun/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo的图片的玩法"><a href="#hexo的图片的玩法" class="headerlink" title="hexo的图片的玩法"></a>hexo的图片的玩法</h3><h4 id="给自己的文章添加图片"><a href="#给自己的文章添加图片" class="headerlink" title="给自己的文章添加图片"></a>给自己的文章添加图片</h4><p>在Markdown中<code>![图片名](url)</code>，这里面的url若是网上的则直接弄过来就可以；坑为本地上传的图片地址，在source文件夹中创建一个文件夹img用来保存图片，然后url写成/img/图片名.格式即可。<br>标题那添加则和上面类似，img: url，url与上面一样。</p><h4 id="给自己的字段添加超链接"><a href="#给自己的字段添加超链接" class="headerlink" title="给自己的字段添加超链接"></a>给自己的字段添加超链接</h4><p>在Markdown中<code>[字段](url)</code>，url建议不用本地，因为本人还没玩透。</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript</title>
      <link href="/2019/01/02/JavaScript/"/>
      <url>/2019/01/02/JavaScript/</url>
      
        <content type="html"><![CDATA[<ul><li>JavaScript - 交互行为 - behavior</li><li>语法规范 - ECMAScript</li><li>BOM - 浏览器对象模型 - window</li><li>DOM - 文档对象模型 - document</li><li>getElementById() / getElementsByTagName() / getElementsByClassName() / querySelector() / querySelectorAll()</li><li>createElement() / appendChild() / insertBefore()</li><li>removeChild()</li><li>innerHTML / textContent / className / style</li><li>parentNode / children / prevSibling / nextSibling</li><li>addEventListener / removeEventListener</li><li>jQuery —&gt; window.$ / window.jQuery </li><li>$(‘样式表选择器’)：获取页面元素返回jQuery对象</li><li>$(‘&lt;标签&gt;’)：创建新元素得到jQuery对象</li><li>$(原生JavaScript对象)：将原生JS对象转成jQuery对象</li><li>$(function() {})：绑定页面加载完成之后要执行的回调函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS</title>
      <link href="/2019/01/02/CSS/"/>
      <url>/2019/01/02/CSS/</url>
      
        <content type="html"><![CDATA[<p>CSS - 渲染页面 - display </p><ul><li>选择器</li><li>通配符选择器</li><li>标签选择器</li><li>类选择器</li><li>ID选择器</li><li>属性选择器</li><li>后代选择器 / 父子选择器</li><li>兄弟选择器 / 相邻兄弟选择器</li><li>伪类 / 伪元素</li><li>就近原则/具体性原则/重要性原则</li><li>盒子模型（内容-padding-border-背景图-背景色-margin）</li><li>常用样式属性和常用属性值</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/2019/01/02/HTML/"/>
      <url>/2019/01/02/HTML/</url>
      
        <content type="html"><![CDATA[<p>HTML标签 - 承载内容 - content</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pycharm构建Django</title>
      <link href="/2019/01/02/pycharm%E6%9E%84%E5%BB%BADjango/"/>
      <url>/2019/01/02/pycharm%E6%9E%84%E5%BB%BADjango/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过PyCharm创建Python项目-—-gt-hellodjango"><a href="#1-通过PyCharm创建Python项目-—-gt-hellodjango" class="headerlink" title="1. 通过PyCharm创建Python项目 —&gt; hellodjango"></a>1. 通过PyCharm创建Python项目 —&gt; hellodjango</h3><h3 id="2-在Terminal的虚拟环境中安装依赖项-—-gt"><a href="#2-在Terminal的虚拟环境中安装依赖项-—-gt" class="headerlink" title="2. 在Terminal的虚拟环境中安装依赖项 —&gt;"></a>2. 在Terminal的虚拟环境中安装依赖项 —&gt;</h3><p>   pip install django pymysql django-redis djangorestframework pillow #安装</p><p>   pip check  #检查是否冲突</p><p>   pip freeze &gt; requirements.txt #导出python安装包环境</p><p>备注:<code>pip install -r requirements.txt</code>导入requirements文件</p><h3 id="3-创建Django项目-—-gt"><a href="#3-创建Django项目-—-gt" class="headerlink" title="3. 创建Django项目 —&gt;"></a>3. 创建Django项目 —&gt;</h3><p>   django-admin startproject hellodjango .</p><h3 id="4-运行项目-—-gt"><a href="#4-运行项目-—-gt" class="headerlink" title="4. 运行项目 —&gt;"></a>4. 运行项目 —&gt;</h3><p>   python manage.py runserver<br>   <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a><br>   <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a><br>   python manage.py runserver 0.0.0.0:80<br>   <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a><br>   <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a><br>   <a href="http://10.7.187.140" target="_blank" rel="noopener">http://10.7.187.140</a></p><h3 id="5-修改配置文件-—-gt-hellodjango-settings-py"><a href="#5-修改配置文件-—-gt-hellodjango-settings-py" class="headerlink" title="5. 修改配置文件 —&gt; hellodjango/settings.py"></a>5. 修改配置文件 —&gt; hellodjango/settings.py</h3><p>   LANGUAGE_CODE = ‘zh-hans’<br>   TIME_ZONE = ‘Asia/Chongqing’<br>   DATABASES = {<br>   ‘default’: {<br>   ​    ‘BACKEND’: ‘….mysql’,<br>   ​    ‘NAME’: ‘’<br>   ​    ‘HOST’: ‘’,<br>   ​    ‘PORT’: 3306,<br>   ​    ‘USER’: ‘’,<br>   ​    ‘PASSWORD’: ‘’,<br>   ​    ‘TIME_ZONE’: ‘Asia/Chongqing’,<br>   }<br>   }</p><h3 id="6-修改init-py文件"><a href="#6-修改init-py文件" class="headerlink" title="6. 修改init.py文件"></a>6. 修改<strong>init</strong>.py文件</h3><p>   import pymysql</p><p>pymysql.install_as_MySQLdb()</p><h3 id="7-生成Django自带的数据表"><a href="#7-生成Django自带的数据表" class="headerlink" title="7. 生成Django自带的数据表"></a>7. 生成Django自带的数据表</h3><p>   python manage.py migrate</p><h3 id="8-创建后台管理员账号"><a href="#8-创建后台管理员账号" class="headerlink" title="8. 创建后台管理员账号"></a>8. 创建后台管理员账号</h3><p>   python manage.py createsuperuser</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB后端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django</title>
      <link href="/2019/01/02/Web%E5%90%8E%E7%AB%AF-Django/"/>
      <url>/2019/01/02/Web%E5%90%8E%E7%AB%AF-Django/</url>
      
        <content type="html"><![CDATA[<h2 id="注-本篇方法通过virtualenv直接在命令行模式安装，另有通过pycharm构建"><a href="#注-本篇方法通过virtualenv直接在命令行模式安装，另有通过pycharm构建" class="headerlink" title="注:本篇方法通过virtualenv直接在命令行模式安装，另有通过pycharm构建"></a>注:本篇方法通过virtualenv直接在命令行模式安装，另有通过<a href="https://ddf118.github.io/2019/01/02/pycharm构建Django/">pycharm构建</a></h2><h3 id="一-构建虚拟环境"><a href="#一-构建虚拟环境" class="headerlink" title="一.构建虚拟环境"></a>一.构建虚拟环境</h3><ol><li><p>安装virtualenv</p><p> pip install virtualenv</p><p> 若不成功 配置环境变量</p></li><li><p>创建虚拟环境<br> <code>d:</code> <code>mkdir env</code>  <code>cd env</code>进入保存环境的文件夹再创建</p><p> virtualenv –no-site-package -p 绝对路径 name</p><p> –no-site-package:表示创建的虚拟环境为纯净的环境。</p><p> 若有多个python版本<br> -p 绝对路径 name: 表示虚拟环境中使用的python版本</p></li><li><p>pip使用</p><p> pip list：查看虚拟环境下安装的所有的包　</p><p> pip freeze：查看虚拟环境重通过pip安装的包</p><p> pip install xxx: 安装</p></li><li><p>激活虚拟环境<br> cd env/Scripts/ 进入虚拟环境文件夹<br> 激活：<br> Windows: 直接执行activate命令<br> Mac/Linux: 直接执行source activate命令<br> 在虚拟环境中安装依赖项:</p><pre class=" language-python"><code class="language-python">pip install django pymysql django<span class="token operator">-</span>redis djangorestframework pillow</code></pre></li><li>退出虚拟环境<br> Windows/Mac/Linux: 直接执行deactivate</li></ol><h3 id="二-Django项目"><a href="#二-Django项目" class="headerlink" title="二.Django项目"></a>二.Django项目</h3><ol><li><p>创建项目<br>django-admin startproject 项目名称</p><p><img src="/img/3.jpg" alt="3"></p></li></ol><ol start="2"><li><p>启动项目<br>启动命令: python manage.py runserver。默认IP为127.0.0.1  默认端口为8000<br>该命令是运行项目，端口可以不用写，启动的时候会默认随机创建一个可以使用的端口</p><p>修改启动端口: python manage.py runserver 端口<br>修改IP和端口: python manage.py runserver IP:端口<br>IP参数: 如果为0.0.0.0表示任何人都可以通过公网IP访问django项目<br>端口PORT参数: 如果端口设置为80，表示该端口可以不用写</p></li><li><p>创建app<br>python manage.py startapp 名字</p></li></ol><h3 id="三-Django模式"><a href="#三-Django模式" class="headerlink" title="三.Django模式"></a>三.Django模式</h3><p>MVT模式是由MVC模式演变出来的。</p><p>MVT/MTV:<br>​    M: models.py,模型层,定义模型和数据库中的表之间的关联关系<br>​    V: views.py,视图层,定义业务逻辑的地方<br>​    T: templates,模板,定义HTML页面的地方<br>​<br>补充:MVC模式是所有框架遵循的模式。<br>MVC:<br>​    M: 模型层<br>​    V: 模板，HTML页面<br>​    C: controller，控制器，写业务逻辑的地方</p><h3 id="四-数据库准备工作"><a href="#四-数据库准备工作" class="headerlink" title="四.数据库准备工作"></a>四.数据库准备工作</h3><ol><li>settings.py中配置<pre class=" language-python"><code class="language-python"><span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#ENGINE参数:选用mysql</span><span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'dj8'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#NAME参数: 数据库名</span><span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#HOST参数: 访问数据库的地址</span><span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#PORT参数: 访问数据库的端口</span><span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#USER参数: 访问用户</span><span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#PASSWORD参数: 密码</span><span class="token string">'TIME_ZONE'</span><span class="token punctuation">:</span> <span class="token string">'Asia/Chongqing'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">#TIME_ZONE:时区</span><span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'isolation_level'</span><span class="token punctuation">:</span>None<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#OPTIONS</span></code></pre><a href="https://docs.djangoproject.com/en/2.1/ref/settings/#databases" target="_blank" rel="noopener">配置详见</a></li></ol><pre class=" language-python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span> <span class="token comment" spellcheck="true">#设置为中文</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Chongqing'</span> <span class="token comment" spellcheck="true">#时区设为重庆</span></code></pre><ol start="2"><li>安装pymysql<br> 使用pymysql连接数据库: 因为python3没有MySQLdb驱动，无法直接连接MySQL<br> 在工程目录的<strong>init</strong>.py文件中定义  pymysql.install_as_MySQLdb()</li><li>迁移<br> 第一次迁移: python manege.py migrate<br> 除开第一次迁移<br> 生成迁移文件: python manage.py makemigrations<br> 执行迁移文件: python manage.py migrate</li><li>插入管理员账号<br> python manage.py createsuperuser</li></ol>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB后端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2018/12/24/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
      <url>/2018/12/24/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="/img/vim1.png" alt="vim1"> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><h4 id="2-保存和退出"><a href="#2-保存和退出" class="headerlink" title="2.保存和退出"></a>2.保存和退出</h4><p>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><h4 id="3-光标操作"><a href="#3-光标操作" class="headerlink" title="3.光标操作"></a>3.光标操作</h4><p>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><h4 id="4-文本操作"><a href="#4-文本操作" class="headerlink" title="4.文本操作"></a>4.文本操作</h4><p>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh的基本操作</title>
      <link href="/2018/12/24/ssh%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/12/24/ssh%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh的基本操作"><a href="#ssh的基本操作" class="headerlink" title="ssh的基本操作"></a>ssh的基本操作</h1><h3 id="1-ssh服务器-文字接口连接服务器"><a href="#1-ssh服务器-文字接口连接服务器" class="headerlink" title="1.ssh服务器(文字接口连接服务器)"></a>1.ssh服务器(文字接口连接服务器)</h3><p>SSH是Secure Shell Protocol(安全的壳程序协议)的简写。</p><p>公钥:id_rsa.pub</p><p>1.很多服务器都是需要认证的，ssh认证是其中的一种。在客户端生成公钥，把生成的公钥添加到服务器，你以后连接服务器就不用每次都输入用户名和密码了。</p><p>2.很多git服务器都是用ssh认证方式，你需要把你生成的公钥发送给代码仓库管理员，让他给你添加到服务器上，你就可以通过ssh自由地拉取和提交代码了。</p><p>私钥:id_rsa</p><p>启动SSH服务(默认已经启动)：/etc/init.d/sshd restart</p><h3 id="2-查看本机-ssh-公钥，生成公钥"><a href="#2-查看本机-ssh-公钥，生成公钥" class="headerlink" title="2.查看本机 ssh 公钥，生成公钥"></a>2.查看本机 ssh 公钥，生成公钥</h3><p>生成公钥</p><p>1.生成公钥了：ssh-keygen</p><p>2.接着会确认存放公钥的地址，默认就是上面说的路径，直接enter键确认</p><p>3.接着会要求输入密码和确认密码，如果不想设置密码直接不输入内容 按enter键</p><p>查看 ssh 公钥方法：</p><p>1.通过命令窗口</p><p>a. 打开你的 git bash 窗口</p><p>b. 进入 .ssh 目录：cd ~/.ssh</p><p>c. 找到 id_rsa.pub 文件：ls</p><p>d. 查看公钥：cat id_rsa.pub 或者 vim id_rsa.pub</p><p>2.或者你也可以直接输入命令 ：cat ~/.ssh/id_rsa.pub</p><p>3.或者你也可以直接打开你用户（一般都是 Administrator）下的 .ssh 文件夹，打开它里面的 id_rsa.pub 文件.</p><h3 id="3-通过ssh连接服务器"><a href="#3-通过ssh连接服务器" class="headerlink" title="3.通过ssh连接服务器"></a>3.通过ssh连接服务器</h3><p>ssh 账号@主机ip</p><h3 id="4-给服务器添加公钥-阿里"><a href="#4-给服务器添加公钥-阿里" class="headerlink" title="4.给服务器添加公钥(阿里)"></a>4.给服务器添加公钥(阿里)</h3><p>cd ~/.ssh</p><p>vim authorized_keys 然后在里面加入自己本地的公钥</p><h3 id="5-远程添加"><a href="#5-远程添加" class="headerlink" title="5.远程添加"></a>5.远程添加</h3><p>文件异地直接复制:SCP</p><p><img src="/img/scp1.png" alt=""></p><p>scp id_rsa.pub root@主机地址:~/.ssh/ddf.pub              </p><p>cat ddf.pub &gt;&gt;authorized_keys         累加进                          </p><h3 id="6-退出"><a href="#6-退出" class="headerlink" title="6.退出"></a>6.退出</h3><p>logout</p>]]></content>
      
      
      <categories>
          
          <category> 技术类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux操作篇</title>
      <link href="/2018/12/22/linux%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
      <url>/2018/12/22/linux%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>ls<br>cd<br>mv<br>cp<br>grep<br><a href="https://ddf118.github.io/2018/12/24/vim编辑器之神/">vim</a></p>]]></content>
      
      
      <categories>
          
          <category> 系统管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建篇</title>
      <link href="/2018/12/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87/"/>
      <url>/2018/12/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><h4 id="一-注册github并创建自己的仓库"><a href="#一-注册github并创建自己的仓库" class="headerlink" title="一.注册github并创建自己的仓库"></a>一.注册<a href="https://github.com/" target="_blank" rel="noopener">github</a>并创建自己的仓库</h4><ol><li><p><strong>在github上注册账号</strong></p></li><li><p><strong>创建仓库</strong></p><p> 名字一定的是你的 username.github.io,不然无法通过username.github.io访问</p></li></ol><h4 id="二-HEXO"><a href="#二-HEXO" class="headerlink" title="二. HEXO"></a>二. <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">HEXO</a></h4><ol><li><strong>环境搭建——要使用Hexo,需要安装Nodejs以及Git</strong></li></ol><p>安装Node.js</p><p> <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载Node.js</a></p><p> <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装Node.js</a></p><p>安装Git</p><p> <a href="https://git-scm.com/download/" target="_blank" rel="noopener">下载git</a></p><p> <a href="">中文安装提示</a></p><ol start="2"><li><p><strong>安装Hexo</strong></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">详情</a></p></li></ol><p>在你需要安装Hexo的目录下(新建一个文件夹)右键选择 Git Bash</p><p><code>npm install -g hexo-cli</code>    #使用 npm 安装 Hexo</p><p><code>npm install --save hexo-deployer-git</code> #安装扩展</p><p><code>hexo init</code>  #初始化网站</p><p><code>hexo s</code>#启动本地服务器(hexo server)。默认情况下，访问网址为：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p><code>hexo g</code> #生成静态文件(hexo generate)</p><p><code>hexo d</code> #部署网站(hexo deploy)</p><p>编辑根目录下_config.yml文件</p><p>deploy:<br>​    type: git<br>​    repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/username.github.io.git  #这里的网址填你自己的<br>​    branch: master </p><ol start="3"><li><strong>添加主题</strong></li></ol><p><code>hexo clean</code> #清除缓存</p><p><code>git clone 主题地址</code></p><ol start="4"><li><strong>更新博客基本操作</strong></li></ol><p>hexo clean(更改主题后必用)</p><p>hexo g</p><p>hexo d</p><ol start="5"><li><p><strong>ssh授权</strong></p><p><a href="https://ddf118.github.io/2018/12/24/ssh的基本操作/">详见</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo操作篇</title>
      <link href="/2018/12/22/hexo%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
      <url>/2018/12/22/hexo%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Hexo使用攻略-添加分类及标签"><a href="#一-Hexo使用攻略-添加分类及标签" class="headerlink" title="一.Hexo使用攻略-添加分类及标签"></a>一.Hexo使用攻略-添加分类及标签</h2><p>1.创建分类</p><p>hexo new page “分类”</p><p>创建完成后,打开创建分类中的index.md。</p><p>在其中添加type: “分类名”</p><p>2.给文章添加分类属性</p><p>打开需要添加分类的文章，为其添加分类属性。分类: -web 表示添加这篇文章到“web”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web”下的 “-xxx ”分类）。</p><h2 id="二-添加分类及标签"><a href="#二-添加分类及标签" class="headerlink" title="二.添加分类及标签"></a>二.添加分类及标签</h2><p>1.创建标签</p><p>hexo new page “tags”</p><p>创建完成后,打开创建分类中的index.md。</p><p>在其中添加type: “标签名”</p><p>2.给文章添加分类属性</p><p>打开需要添加分类的文章，为其添加分类属性。分类: -web 表示添加这篇文章到“web”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web”下的 “-xxx ”分类）。</p><h2 id="三-给自定义添加"><a href="#三-给自定义添加" class="headerlink" title="三.给自定义添加"></a>三.给自定义添加</h2>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GIT操作篇</title>
      <link href="/2018/12/20/git%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
      <url>/2018/12/20/git%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h3><p>Git是目前世界上最先进的分布式版本控制系统。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>现在，Git可以在Linux、Unix、Mac和Windows这<br>几大平台上正常运行了。<br>1.linux上安装Git<br>2.windows上安装Git<br> <a href="https://git-scm.com/download/" target="_blank" rel="noopener">下载Git</a>,然后一路默认。<br> <a href="">中文参考</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="设定自己机器的全局变量"><a href="#设定自己机器的全局变量" class="headerlink" title="设定自己机器的全局变量"></a>设定自己机器的全局变量</h4><p>git config –global user.name “Your Name” —— 设定用户名字，随便写<br> git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“ ——设定用户邮箱，随便写<br>注意git config命令的–global参数，用了这个参数，表明你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h4 id="查看自己机器的配置信息"><a href="#查看自己机器的配置信息" class="headerlink" title="查看自己机器的配置信息"></a>查看自己机器的配置信息</h4><p>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-&gt;global-&gt;local  底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件<br>git config –system –list——查看系统config<br>git config –global  –list——查看当前用户（global）配置<br>git config –local  –list—— 查看当前仓库配置信息<br>git config –list ——查看全配置</p><h4 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h4><p>git config –global color.ui true ——开启颜色支持<br>git config –global core.quotepath false ——支持utf-8编码</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>git config –global –replace-all user.email “输入你的邮箱”<br>git config –global –replace-all user.name “输入你的用户名”</p><h3 id="创建版本库（repository）"><a href="#创建版本库（repository）" class="headerlink" title="创建版本库（repository）"></a>创建版本库（repository）</h3><p>mkdir directory——创建一个空目录<br>cd directory<br>windows下目录最好不用中文<br>git init——初始化仓库</p><h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>git status</p><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><p>touch ddf.txt<br>git add ddf.txt——把文件添加到仓库<br>git add -A——添加所有文件到仓库<br>这里如果有警告则添加git config –global core.autocrlf false；原因是路径中存在 / 的符号转义问题，false就是不转换符号默认是true，相当于把路径的 / 符号进行转义，这样添加的时候就有问题。<br>git commit -m “first”——把文件提交到仓库<br>git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="回溯操作"><a href="#回溯操作" class="headerlink" title="回溯操作"></a>回溯操作</h3><p>git dif——查看difference，即查看修改内容<br>git log——查看提交历史，以便确定要回退到哪个版本。<br>记住：commit_id（版本号）<br>git reset –hard HEAD^——HEAD指向的版本就是当前版本，该指令即为回到上个操作版本<br>git reset –hard commit_id——回溯到相应版本<br>git reflog——查看命令历史，以便确定要回到未来的哪个版本。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p> git checkout – ddf.txt</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p> rm ddf.txt</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>git push——推送，第一次后即用<br>git push  -u origin master——第一次推送master分支的所有内容</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>1.通过https克隆<br>git clone url<br>2.通过ssh克隆</p><h3 id="从远程添加到本地"><a href="#从远程添加到本地" class="headerlink" title="从远程添加到本地"></a>从远程添加到本地</h3><p> git pull——拉</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/18/hello-world/"/>
      <url>/2018/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
