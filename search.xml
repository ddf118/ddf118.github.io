<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/05/29/zheng-ze-biao-da-shi/"/>
      <url>/2023/05/29/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(英语：Regular expression，常简写为regex、regexp或RE)就是字符匹配的工具;是由正则符号和普通字符组成，来匹配不同规律的字符串。<br>一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列匹配某个句法规则的字符串。</p><h3 id="普通字符-amp-元字符"><a href="#普通字符-amp-元字符" class="headerlink" title="普通字符&amp;元字符"></a>普通字符&amp;元字符</h3><blockquote><p>普通字符在正则表达式中，代表字符本身。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p></blockquote><p>完整字符匹配<br>eg: ‘abc’ –&gt; 匹配一个字符串，第一个字符是’a’,第二个字符是’b’,第三个字符也是最后一个字符是’c’</p><blockquote><p>元字符就是指那些在正则表达式中具有特殊意义的专用字符，’\大写字母’对应的功能是’\小写字母’功能取反</p></blockquote><h4 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h4><table><thead><tr><th>常用字符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td><td>‘a.c’ –&gt; 匹配一个长度上3的字符串，并且第一个字符是’a’,最后一个字符是’c’,中间是任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td><td>‘\w\w…’ –&gt; 匹配一个长度是5的字符串，并且字符串的前两位是数字、字母和下划线，后面是三个任意字符</td></tr><tr><td>\s</td><td>匹配任意的空白符 包括：空格、制表符和换行符(空格,\t,\r,\n)</td><td>‘a.c’ –&gt; ‘\w\w\s\w’ –&gt; 匹配一个长度是4的字符串，并且字符串前两位是字母数字或者下划线(中文),中间一个空白，再一个字母数字或者下划线(中文)</td></tr><tr><td>\d</td><td>匹配数字字符</td><td>‘\d\d\d..’ –&gt; 匹配一个长度是5的字符串，字符串的前三位是数字字符，后两位是任意字符</td></tr><tr><td>\W</td><td>匹配非数字或字母或下划线</td><td>‘\d\D\s\w\Ba’ –&gt; 匹配一个字符串，第一个字符是数字、第二个是非数字,第三个是空白，第四个是数字字母下划线，最后一个是a，并且要求a前面不是单词边界</td></tr><tr><td>\D</td><td>匹配非数字字符</td><td>同上</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>同上</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td><td>‘.‘ –&gt; 匹配’.’这个字符</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置</td><td></td></tr><tr><td>[</td><td>标记一个中括号表达式的开始</td><td></td></tr><tr><td>{</td><td>标记限定符表达式的开始</td><td></td></tr><tr><td>|</td><td>指明两项之间的一个选择</td><td></td></tr></tbody></table><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><table><thead><tr><th>定位字符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始</td><td>‘^The..’ –&gt; 匹配一个字符串前面三个字符是’The’，后面两个任意字符</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>‘The$’ –&gt; 匹配一个字符串前面三个字符是’The’,并且e后面是字符串结尾</td></tr><tr><td>\b</td><td>匹配单词边界 检测\b出现的位置是否是单词边界，不会对字符进行匹配。单词边界：字符串开头、字符串结尾、标点符号、空白符号等</td><td>‘\bhello,\bworld’ –&gt; 匹配字符串’hello,world’, 并且要求w前面是单词边界, h前面也是单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>‘\d\D\s\w\Ba’ –&gt; 匹配一个字符串，第一个字符是数字、第二个是非数字,第三个是空白，第四个是数字字母下划线，最后一个是a，并且要求a前面不是单词边界</td></tr><tr><td><strong>注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</strong></td><td></td><td></td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定字符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次</td><td>‘a\d*’ –&gt; 匹配一个字符串前面第一个字符是a,后面数字可有可无</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次</td><td>‘a\d+’ –&gt; 匹配一个字符串前面第一个字符是a,后面数字有</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次</td><td>‘a\d+’ –&gt; 匹配一个字符串前面第一个字符是a,后面数字无或者只有1个</td></tr><tr><td>{n}</td><td>匹配确定的n次(n非负整数)</td><td>‘a{3}’ –&gt; 匹配’aaa’</td></tr><tr><td>{n,}</td><td>至少匹配n次(n非负整数)</td><td>‘a{1,}’ –&gt; 匹配’a’、’aa’、…</td></tr><tr><td>{,m}</td><td>至多匹配m次(m非负整数)</td><td>‘a{,3}’ –&gt; 匹配’’、’a’、’aa’、’aaa’</td></tr><tr><td>{n,m}</td><td>最少匹配n次且最多匹配m次(m和n均为非负整数，其中n&lt;&#x3D;m)</td><td>‘a{1,3}’ –&gt; 匹配’a’、’aa’、’aaa’</td></tr></tbody></table><h4 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h4><table><thead><tr><th>非打印字符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>\f</td><td>匹配一个换页符</td><td></td></tr><tr><td>\n</td><td>匹配一个换行符</td><td></td></tr><tr><td>\r</td><td>匹配一个回车符</td><td></td></tr><tr><td>\t</td><td>匹配一个制表符</td><td></td></tr><tr><td>\v</td><td>匹配一个垂直制表符</td><td></td></tr></tbody></table><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><blockquote><p>匹配中括号出现的任意一个字符<br>一个中括号只能匹配一个字符<br>正则中有特殊功能的单个符号在[]都表示符号本身 例如：.  $  ^ + * ？ |等<br>匹配字符的组合符号，在中括号中保持原来的功能, 例如: \w  \d \s  \W  \D \S</p></blockquote><h4 id="普通字符集-匹配中括号出现的任意一个字符"><a href="#普通字符集-匹配中括号出现的任意一个字符" class="headerlink" title="[普通字符集] - 匹配中括号出现的任意一个字符"></a>[普通字符集] - 匹配中括号出现的任意一个字符</h4><blockquote><p>eg: ‘[abc]’ –&gt; 匹配一个字符是a或者b或者c;<br>‘\d[bc&#x3D;\d]’ –&gt; 匹配一个长度是2的字符串，第一个字符是数字，第二个字符是b或者c或者&#x3D;或者数字</p></blockquote><h4 id="字符1-字符2-表示字符1到字符2（注意：要求字符1的编码值要小于字符2）"><a href="#字符1-字符2-表示字符1到字符2（注意：要求字符1的编码值要小于字符2）" class="headerlink" title="[字符1-字符2] - 表示字符1到字符2（注意：要求字符1的编码值要小于字符2）"></a>[字符1-字符2] - 表示字符1到字符2（注意：要求字符1的编码值要小于字符2）</h4><blockquote><p>[a-z] - 表示匹配所有小写字母<br>[A-Z] –&gt; 表示匹配所有大写字母<br>[a-zA-Z] –&gt; 匹配所有的字母<br>[1-7] –&gt; 匹配数字字符1到7<br>[\u4e00-\u9fa5] –&gt; 匹配所有的中文<br>eg: ‘[1-7][abc-][a-z]’ –&gt; 匹配一个长度是3的字符串,第一个字符是数字字符1到7中的一个，第二个字符是’a’，’b’,’c’,’-‘中的一个,第三个字符是小写字母</p></blockquote><h4 id="字符集-匹配不在字符集中的任意一个字符"><a href="#字符集-匹配不在字符集中的任意一个字符" class="headerlink" title="[^字符集] - 匹配不在字符集中的任意一个字符"></a>[^字符集] - 匹配不在字符集中的任意一个字符</h4><blockquote><p>[^abc] - 匹配除了’a’,’b’,’c’以外的其他任意一个字符<br>[^\d] –&gt; 匹配除了数字字符以外的其他任意一个字符<br>[^a-z] –&gt; 匹配除了小写字母以外的其他任意一个字符<br>[abc^] –&gt; 匹配’a’,’b’,’c’或者’^’中的任意一个字符</p></blockquote><h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开<br>条件1 | 条件2  - 匹配条件1或者条件2<br><strong>注意：正则中的分之也会出现短路，当条件1可以匹配，就不会再使用条件2进行匹配</strong><br>‘\d{2}|[a-z]’ –&gt; 匹配两个数字字符或者一个小写字母<br>‘a\d{2}|\w{2}’ –&gt; 匹配一个a后面两个数字，或者两个数字字母下划线</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li>分组 - 将括号中的内容作为一个整体<br>‘(\d[a-z]){3}’ –&gt; 匹配一个字符串，以’数字小写字母’的形式出现3次<br>‘abc(\d{3}|[A-Z]{3})’ –&gt; 匹配一个字符串，前三位是’abc’,后三位是三个数字或者三个大写字母</li></ul><h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><p>用于重复搜索前面某个分组匹配的文本</p><ul><li>常用分组语法</li></ul><table><thead><tr><th>分类</th><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td>捕获</td><td>(?<name>exp)</td><td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td></tr><tr><td>捕获</td><td>(?:exp)</td><td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td>零宽断言</td><td>(?&#x3D;exp)</td><td>匹配exp前面的位置</td></tr><tr><td>零宽断言</td><td>(?&lt;&#x3D;exp)</td><td>匹配exp后面的位置</td></tr><tr><td>零宽断言</td><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td></tr><tr><td>零宽断言</td><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td></tr><tr><td>注释</td><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><ul><li>捕获 - <strong>通过正则获取符合条件的子串的时候，可以在正则表达式中加括号，匹配后只获取括号里面匹配到的内容</strong><br>‘a(\d+)’ –&gt; ‘ahsa783+sdh*92dfjhjj78jhsda67jk’ –&gt; 匹配两段：’783’、’67’</li><li>重复匹配 - <strong>带多个分组的正则表达式中可以分组的后面通过添加’\数字’来重复前面第几个分组中匹配到的内容</strong><blockquote><p>\数字重复之前的内容 必须一样<br>\数字 - 这儿的数字代表前面第几个分组; \1代表第一个分组  \2代表第二个分组</p></blockquote></li></ul><p>‘(\d{3})([a-z]{2})a\1{2}-\2’ –&gt; ‘123efa123123-ef’ –&gt; 完全匹配,1-3位数字,4-5位小写字母,6位a,7-12位数字(重复分组1*2),13位-,14-15位小写字母(重复分组2)</p><ul><li>零宽断言 - <strong>查找在某些内容(但并不包括这些内容)之前或之后的东西</strong><ul><li>(?&#x3D;exp)<br>  零宽度正预测先行断言,断言自身出现的位置的后面能匹配表达式exp<br>  ‘\b\w+(?&#x3D;ing\b)’ –&gt; 匹配以ing结尾的单词的前面部分(除了ing以外的部分) –&gt; ‘I”m singing while you’re dancing.’ –&gt; ‘sing’、’danc’</li><li>(?&lt;&#x3D;exp)<br>  零宽度正回顾后发断言,断言自身出现的位置的前面能匹配表达式exp<br>  ‘(?&lt;&#x3D;\bre)\w+\b’ –&gt; 匹配以re开头的单词的后半部分(除了re以外的部分) –&gt; ‘reading a book’ –&gt; ‘ading’</li></ul></li><li>负向零宽断言 - <strong>查找不是某个字符或不在某个字符类里的字符的方法</strong><ul><li>(?!exp)<br>  零宽度负预测先行断言,断言此位置的后面不能匹配表达式exp<br>  ‘\d{3}(?!\d)’ –&gt; 匹配三位数字，而且这三位数字的后面不能是数字 –&gt; ‘11ddf118ggg’ –&gt; ‘ggg’<br>  ‘\b(?!abc)\w+\b’ –&gt; 匹配不包含连续字符串abc的单词 –&gt; ‘abc118 1 a2’ –&gt; ‘1’、’a2’</li><li>(?&lt;!exp)<br>  零宽度负回顾后发断言,断言此位置的前面不能匹配表达式exp<br>  ‘(?&lt;![a-z])\d{7}’ –&gt; 匹配前面不是小写字母的七位数字 –&gt; ‘abc1234567A7654321’ –&gt; ‘7654321’</li></ul></li><li>注释<br>‘2[0-4]\d(?#200-249)’ –&gt; 匹配200-249 –&gt; ‘abc1234567A7654321’ –&gt; ‘234’</li></ul><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><ul><li>贪婪匹配 - 匹配尽可能多的字符<br>‘a.+b’ –&gt; ‘xxxahdjbnnkbsssammmb’ –&gt; ‘ahdjbnnkbsssammmb’</li><li>懒惰匹配 - 匹配尽可能少的字符<br>‘a.+?b’ –&gt; ‘xxxahdjbnnkbsssammmb’ –&gt; ‘ahdjb’、’ammmb’</li><li>懒惰限定符<table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table></li></ul><h2 id="Python中的使用"><a href="#Python中的使用" class="headerlink" title="Python中的使用"></a>Python中的使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment"># re.compile(pattern, flags=0) 将正则表达式的样式编译为一个正则表达式对象(正则对象)</span><span class="token comment"># 如果需要多次使用这个正则表达式的话，使用 re.compile() 和保存这个正则对象以便复用，可以让程序更加高效</span>re_str <span class="token operator">=</span> <span class="token string">r"\d&#123;3&#125;"</span>re_obj <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>re_str<span class="token punctuation">)</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>re_str<span class="token punctuation">,</span> <span class="token string">"234"</span><span class="token punctuation">)</span> <span class="token comment"># 调用模块中的函数 &lt;re.Match object; span=(0, 3), match='234'></span>re_obj<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">"234"</span><span class="token punctuation">)</span> <span class="token comment"># 调用对象方法 &lt;re.Match object; span=(0, 3), match='234'></span><span class="token comment"># re.fullmatch(pattern, string, flags=0) 如果整个string匹配到正则表达式样式，就返回一个相应的匹配对象</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;"</span><span class="token punctuation">,</span> <span class="token string">"ddf123456"</span><span class="token punctuation">)</span> <span class="token comment"># None</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span> <span class="token comment"># &lt;re.Match object; span=(0, 6), match='123456'></span><span class="token comment"># re.match(pattern, string, flags=0) 如果string开始的0或者多个字符匹配到了正则表达式样式，就返回一个相应的匹配对象</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;"</span><span class="token punctuation">,</span> <span class="token string">"ddf123456"</span><span class="token punctuation">)</span> <span class="token comment"># None</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;"</span><span class="token punctuation">,</span> <span class="token string">"123456ddf"</span><span class="token punctuation">)</span> <span class="token comment"># &lt;re.Match object; span=(0, 6), match='123456'></span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;?"</span><span class="token punctuation">,</span> <span class="token string">"123456ddf"</span><span class="token punctuation">)</span> <span class="token comment"># &lt;re.Match object; span=(0, 5), match='12345'></span><span class="token comment"># re.search(pattern, string, flags=0) 扫描整个字符串找到匹配样式的第一个位置，并返回一个相应的匹配对象</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;"</span><span class="token punctuation">,</span> <span class="token string">"ddf123456"</span><span class="token punctuation">)</span> <span class="token comment"># &lt;re.Match object; span=(3, 9), match='123456'></span><span class="token comment"># re.split(pattern, string, maxsplit=0, flags=0)</span><span class="token comment"># 用pattern分开string。如果在pattern中捕获到括号，那么所有的组里的文字也会包含在列表里。如果maxsplit非零，最多进行 maxsplit 次分隔，剩下的字符全部返回到列表的最后一个元素。</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r"[a-f]+"</span><span class="token punctuation">,</span> <span class="token string">"0a3B9a008"</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span> <span class="token comment"># ['0', '3', '9', '008']</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r"[a-f]+"</span><span class="token punctuation">,</span> <span class="token string">"0a3B9a008"</span><span class="token punctuation">)</span> <span class="token comment"># ['0', '3B9', '008']</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r"[a-f]+"</span><span class="token punctuation">,</span> <span class="token string">"0a3B9a008"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span> <span class="token comment"># ['0', '3B9a008']</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r"([a-f]+)"</span><span class="token punctuation">,</span> <span class="token string">"0a3B9a008"</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span> <span class="token comment"># ['0', 'a', '3', 'B', '9', 'a', '008']</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">r"([a-f]+)"</span><span class="token punctuation">,</span> <span class="token string">"0a3B9a008"</span><span class="token punctuation">)</span> <span class="token comment"># ['0', 'a', '3B9', 'a', '008']</span><span class="token comment"># re.findall(pattern, string, flags=0)</span><span class="token comment"># 在字符串中获取满足正则表达式的所有的字符，返回一个列表，列表元素是字符串</span><span class="token comment"># 如果这个正则表达式中有一个分组，结果是列表中只那个分组匹配到的结果</span><span class="token comment"># 如果这个正则表达式中分组的个数大于1，结果是一个列表，列表中的元素是元祖，元祖中是每个分组匹配到的内容</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"[a-zA-Z]&#123;2,&#125;\d+[a-z]+?"</span><span class="token punctuation">,</span> <span class="token string">"haja37jjkd89sdhs909nnna238"</span><span class="token punctuation">)</span> <span class="token comment"># ['haja37j', 'jkd89s', 'dhs909n']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"[a-zA-Z]&#123;2,&#125;(\d+)[a-z]+?"</span><span class="token punctuation">,</span> <span class="token string">"haja37jjkd89sdhs909nnna238"</span><span class="token punctuation">)</span> <span class="token comment"># ['37', '89', '909']</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"[a-zA-Z]&#123;2,&#125;(\d+)([a-z]+?)"</span><span class="token punctuation">,</span> <span class="token string">"haja37jjkd89sdhs909nnna238"</span><span class="token punctuation">)</span> <span class="token comment"># [('37', 'j'), ('89', 's'), ('909', 'n')]</span><span class="token comment"># re.finditer(pattern, string, flags=0)</span><span class="token comment"># 获取字符串中满足正则表达式的内容，返回的是一个迭代器，迭代器中的元素是匹配对象</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r"[a-zA-Z]&#123;2,&#125;(\d+)([a-z]+?)"</span><span class="token punctuation">,</span> <span class="token string">"haja37jjkd89sdhs909nnna238==="</span><span class="token punctuation">)</span> <span class="token comment"># &lt;callable_iterator object at 0x00000162676BB340></span><span class="token builtin">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment"># &lt;re.Match object; span=(0, 7), match='haja37j'></span><span class="token comment"># re.sub(pattern, repl, string, count=0, flags=0)</span><span class="token comment"># 用新子串替换字符串中满足正则表达式的子串，返回一个替换后的字符串</span><span class="token comment"># repl可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理;如为函数，那它会对每个非重复的pattern的情况调用</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\sAND\s"</span><span class="token punctuation">,</span> <span class="token string">" &amp; "</span><span class="token punctuation">,</span> <span class="token string">"Baked Beans And Spam"</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>matchobj<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matchobj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"odd"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">"even"</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> foo<span class="token punctuation">,</span> <span class="token string">"who i am,1,2,123"</span><span class="token punctuation">)</span> <span class="token comment"># 'who i am,odd,even,odd'</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> foo<span class="token punctuation">,</span> <span class="token string">"who i am,1,2,123"</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 'who i am,odd,2,123'</span><span class="token comment"># re.subn(pattern, repl, string, count=0, flags=0)</span><span class="token comment"># 返回一个元组(字符串, 替换次数).</span>re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span> foo<span class="token punctuation">,</span> <span class="token string">"who i am,1,2,123"</span><span class="token punctuation">)</span> <span class="token comment"># ('who i am,odd,even,odd', 3)</span><span class="token comment"># 匹配对象</span><span class="token comment"># 匹配对象总是有一个布尔值True。如果没有匹配的话match()和search()返回None所以可以简单的用if语句来判断是否匹配</span><span class="token comment"># Match.start([group]) 获取匹配结果的开始下标</span><span class="token comment"># Match.end([group]) 获取匹配结果的结束下标</span><span class="token comment"># 匹配对象.start()/匹配对象.end() - 获取整个正则表达式匹配到的开始下标/结束下标</span><span class="token comment"># 匹配对象.start(n)/匹配对象.end(n) - 获取正则表达式中第n个分组匹配到的开始/结束下标</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"\d&#123;5,&#125;?"</span><span class="token punctuation">,</span> <span class="token string">"123456ddf"</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 0 </span>m<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 5</span><span class="token comment"># Match.span([group])</span><span class="token comment"># 匹配到的内容的范围，(开始下标, 结束下标)</span><span class="token comment"># 匹配对象.span() - 获取整个正则表达式匹配到的范围</span><span class="token comment"># 匹配对象.span(n) - 获取正则表达式中第n个分组匹配到的范围(前提是有分组)</span>m<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># (0, 5)</span><span class="token comment"># Match.group([group1, ...]) 获取匹配到的内容</span><span class="token comment"># 匹配对象.group() - 获取整个正则表达式匹配到的内容</span><span class="token comment"># 匹配对象.group(n) - 获取正则表达式中第n个分组匹配到的内容</span>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"(\w+) (\w+)"</span><span class="token punctuation">,</span> <span class="token string">"Isaac Newton, physicist"</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 'Isaac Newton'</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 'Isaac'</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># ('Isaac', 'Newton')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Golang中的使用"><a href="#Golang中的使用" class="headerlink" title="Golang中的使用"></a>Golang中的使用</h2><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">package mainimport (&quot;fmt&quot;&quot;regexp&quot;&quot;strings&quot;)func main() &#123;&#x2F;&#x2F; regexp.Compile() -&gt; (*Regexp, error) 编译正则表达式re, _ :&#x3D; regexp.Compile(&quot;#(?U)(.+)#&quot;) &#x2F;&#x2F; (?U)表示无视大小写模式template :&#x3D; &quot;Hi 您有一个提醒通知，请输入 性质：全职，状态：正式，#retire_date#，未填写#ov_learning_style#15天，男，离异否是否#residential_address#&quot;&#x2F;&#x2F; Regexp.FindAllString() 所有字符串查询 返回表达式的所有连续匹配的切片findTemplate :&#x3D; re.FindAllString(template, -1)fmt.Println(findTemplate) &#x2F;&#x2F; [#retire_date# #ov_learning_style# #residential_address#]&#x2F;&#x2F; Regexp.FindAllStringSubmatch() 所有字符串查询 返回表达式的所有连续匹配的切片 包含分组内的值fmt.Println(re.FindAllStringSubmatch(template, -1)) &#x2F;&#x2F; [[#retire_date# retire_date] [#ov_learning_style# ov_learning_style] [#residenti al_address# residential_address]]&#x2F;&#x2F; Regexp.ReplaceAllString() 所有字符串替换reTemplate :&#x3D; re.ReplaceAllString(template, &quot;&quot;)fmt.Println(reTemplate) &#x2F;&#x2F; Hi 您有一个提醒通知，请输入 性质：全职，状态：正式，，未填写15天，男，离异否是否&#x2F;&#x2F; Regexp.ReplaceAllStringFunc 所有字符串替换 函数re &#x3D; regexp.MustCompile(&#96;[^aeiou]&#96;)fmt.Println(re.ReplaceAllStringFunc(&quot;seafood fool&quot;, strings.ToUpper)) &#x2F;&#x2F; SeaFooD FooL&#x2F;&#x2F; regexp.MustCompile() -&gt; *Regexp 编译正则表达式fileUrl :&#x3D; &quot;https:&#x2F;&#x2F;pub-cdn-dev.xxxx.com&#x2F;f97c46278b05449eba6ecb9068508f1b?attname&#x3D;ceshi.xlsx&amp;attname&#x3D;xixi.xlsx&quot;re &#x3D; regexp.MustCompile(&quot;attname&#x3D;(.*?).xlsx&quot;)&#x2F;&#x2F; Regexp.FindStringSubmatch() 字符串查询，其中包含查询字符串中正则表达式的最左侧匹配文本及其子表达式的匹配项matchArr :&#x3D; re.FindStringSubmatch(fileUrl)fmt.Println(matchArr) &#x2F;&#x2F; [attname&#x3D;ceshi.xlsx ceshi]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://deerchao.cn/tutorials/regex/regex.htm">deerchao博客</a><br><a href="https://docs.python.org/zh-cn/3/library/re.html">Python re 文档</a><br><a href="https://pkg.go.dev/regexp">Golang regexp 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用技术知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具语言</title>
      <link href="/2023/05/29/gong-ju-yu-yan/"/>
      <url>/2023/05/29/gong-ju-yu-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用 # 号标记: 行首插入1-6个#，每多一个#，标题大小更小，相当于副标题，最多支持六个#<br>使用 &#x3D; 和 - 标记一级和二级标题:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">我展示的是一级标题<span class="token punctuation">===</span></span><span class="token title important">我展示的是二级标题<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>段落之间空一行,即回车</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>斜体格式: 要倾斜的文字左右分别用一个*号包起来 <em>ddf</em><br>粗体格式: 要加粗的文字左右分别用两个*号包起来 <strong>ddf</strong><br>斜体加粗: 要倾斜和加粗的文字左右分别用三个*号包起来 <em><strong>ddf</strong></em><br>删除线: 要加删除线处理的文字左右分别用两个~~号包起来 <del>ddf</del><br>下划线: 要加下划线处理的文字通过HTML的&lt;u&gt;标签 <u>ddf</u></p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个或者三个以上的 - 或者 * 都可以 </p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>单行代码: 代码之间分别用一个包起来 <code>dd</code><br>代码块: </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>无序列表:无序列表用 - + * 任何一种都可以 , - + *内容之间都要有一个空格</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>有序列表:数字加点,序号与内容之间需要有一个空格</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>列表嵌套:如果希望一个没有加列表点的段落和一个列表项的内容显示对齐。需要把非列表段落行首打四个空格（比tab稳点）</p><ul><li>A<ul><li>A1</li><li>A2</li></ul></li></ul><ol><li>B<ul><li>B1</li><li>B2</li></ul></li></ol><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>图片为<code>![](url)</code> <code>![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></p><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p>超链接<code>[](url)</code></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</p><blockquote><p>对齐方式<br>-: 设置内容和标题栏居右对齐<br>:- 设置内容和标题栏居左对齐<br>:-: 设置内容和标题栏居中对齐</p></blockquote><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>Markdown 文件的文件类型是 .md</li></ul><h3 id="开发语言与Markdown"><a href="#开发语言与Markdown" class="headerlink" title="开发语言与Markdown"></a>开发语言与Markdown</h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="https://www.markdownguide.org/">参考文档</a></h3><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ol><li>对象 {}<blockquote><p>对象可以包含多个 key&#x2F;value（键&#x2F;值）对。<br>key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。<br>key 和 value 中使用冒号 : 分割。<br>每个 key&#x2F;value 对使用逗号 , 分割。</p></blockquote></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ddf"</span><span class="token punctuation">,</span> <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token number">1008611</span><span class="token punctuation">,</span> <span class="token property">"site"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span> <span class="token property">"is_married"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>数组 []<blockquote><p>JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ddf"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token property">"is_married"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"site"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>   <span class="token property">"contact_information"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token number">1008611</span><span class="token punctuation">,</span>    <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"15880040000"</span><span class="token punctuation">,</span>    <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Sichuan Province"</span><span class="token punctuation">,</span> <span class="token string">"Guangdong Province"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"twitter"</span><span class="token operator">:</span> <span class="token null keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"family_members"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"dyf"</span><span class="token punctuation">,</span>    <span class="token string">"ydm"</span><span class="token punctuation">,</span>    <span class="token string">"wiam"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"skill"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"fish-farming"</span><span class="token punctuation">,</span> <span class="token property">"score"</span><span class="token operator">:</span> <span class="token number">95</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"C-V"</span><span class="token punctuation">,</span> <span class="token property">"score"</span><span class="token operator">:</span> <span class="token number">85</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h3><ul><li>JSON 文件的文件类型是 .json</li><li>JSON 文本的 MIME 类型是 application&#x2F;json</li></ul><h3 id="开发语言与JSON"><a href="#开发语言与JSON" class="headerlink" title="开发语言与JSON"></a>开发语言与JSON</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonemp_info <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ddf"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"is_married"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>json_emp_info <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>emp_info<span class="token punctuation">)</span> <span class="token comment"># '&#123;"name": "ddf", "age": 18, "site": null, "is_married": true&#125;'</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_emp_info<span class="token punctuation">)</span> <span class="token comment"># &#123;'name': 'ddf', 'age': 18, 'site': None, 'is_married': True&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档-1"><a href="#参考文档-1" class="headerlink" title="参考文档"></a><a href="https://www.json.org/json-zh.html">参考文档</a></h3><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>YAML Ain’t a Markup Language.(YAML不是一种标记语言)。<br>YAML is a human-friendly data serialization language for all programming languages.(YAML是一种适用于所有编程语言的人性化数据序列化语言。)<br>在开发的这种语言时，YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote><p>大小写敏感<br>使用缩进表示层级关系<br>缩进不允许使用tab，只允许空格<br>缩进的空格数不重要，只要相同层级的元素左对齐即可<br>‘#’表示注释</p></blockquote><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><ol><li>对象 <blockquote><p>键值对的集合，又称为映射（mapping）&#x2F; 哈希（hashes） &#x2F; 字典（dictionary）<br>对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。<br>也可以使用 key:{key1: value1, key2: value2, …}。<br>还可以使用缩进表示层级关系。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">labels</span><span class="token punctuation">:</span>  <span class="token key atrule">app_name</span><span class="token punctuation">:</span> project  <span class="token key atrule">env</span><span class="token punctuation">:</span> dev<span class="token key atrule">websites</span><span class="token punctuation">:</span>  <span class="token key atrule">YAML</span><span class="token punctuation">:</span> yaml.org  <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> ruby<span class="token punctuation">-</span>lang.org  <span class="token key atrule">Python</span><span class="token punctuation">:</span> python.org  <span class="token key atrule">Perl</span><span class="token punctuation">:</span> use.perl.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>数组 <blockquote><p>一组按次序排列的值，又称为序列（sequence） &#x2F; 列表（list）<br>以 - 开头的行表示构成一个数组</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">stages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> build  <span class="token punctuation">-</span> auto_cd<span class="token key atrule">languages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Ruby  <span class="token punctuation">-</span> Perl  <span class="token punctuation">-</span> Python <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>纯量（scalars） <blockquote><p>纯量是最基本的，不可再分的值，<br>字符串: 可以使用双引号或者单引号包裹特殊字符;字符串可以拆成多行，每一行会被转化成一个空格<br>布尔值: true,True,false,False<br>整数: 可以使用二进制表示<br>浮点数: 可以使用科学计数法<br>Null: 使用~表示null<br>时间: 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区<br>日期: 日期必须使用ISO 8601格式，即yyyy-MM-dd</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> ddf<span class="token key atrule">mobile</span><span class="token punctuation">:</span> <span class="token string">"15880040000"</span><span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">is_married</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token key atrule">money</span><span class="token punctuation">:</span> <span class="token number">998.18</span><span class="token key atrule">site</span><span class="token punctuation">:</span> <span class="token null important">~</span><span class="token key atrule">hire_date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-07</span><span class="token key atrule">add_dt</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-07T15:02:31+08:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>例子<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">project</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> project    <span class="token key atrule">image</span><span class="token punctuation">:</span> xxx<span class="token punctuation">:</span>dev    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">app_name</span><span class="token punctuation">:</span> <span class="token string">"project"</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token string">"dev"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"15090:8000"</span>    <span class="token key atrule">working_dir</span><span class="token punctuation">:</span> /data/wwwRoot    <span class="token key atrule">command</span><span class="token punctuation">:</span> gunicorn app<span class="token punctuation">:</span>app <span class="token punctuation">-</span><span class="token punctuation">-</span>workers=4 <span class="token punctuation">-</span><span class="token punctuation">-</span>worker<span class="token punctuation">-</span>class=uvicorn.workers.UvicornWorker <span class="token punctuation">-</span><span class="token punctuation">-</span>bind=0.0.0.0<span class="token punctuation">:</span>8000 <span class="token punctuation">-</span><span class="token punctuation">-</span>worker<span class="token punctuation">-</span>tmp<span class="token punctuation">-</span>dir /dev/shm <span class="token punctuation">-</span><span class="token punctuation">-</span>log<span class="token punctuation">-</span>level=debug    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> <span class="token string">"Asia/Shanghai"</span>      <span class="token key atrule">ENV_MODE</span><span class="token punctuation">:</span> <span class="token string">"dev"</span>      <span class="token key atrule">DEBUG</span><span class="token punctuation">:</span> <span class="token string">"true"</span>      <span class="token key atrule">LOG_LEVEL</span><span class="token punctuation">:</span> <span class="token string">"DEBUG"</span>    <span class="token key atrule">logging</span><span class="token punctuation">:</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"json-file"</span>      <span class="token key atrule">options</span><span class="token punctuation">:</span>        <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token string">"2m"</span>        <span class="token key atrule">max-file</span><span class="token punctuation">:</span> <span class="token string">"10"</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>      <span class="token key atrule">com.docker.network.driver.mtu</span><span class="token punctuation">:</span> <span class="token number">1452</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="文件-2"><a href="#文件-2" class="headerlink" title="文件"></a>文件</h3><ul><li>YAML 文件的文件类型是 .yml</li></ul><h3 id="开发语言与YAML"><a href="#开发语言与YAML" class="headerlink" title="开发语言与YAML"></a>开发语言与YAML</h3><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pip install pyyaml</span><span class="token keyword">import</span> yamlemp_info <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ddf"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"is_married"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">&#125;</span>yaml_emp_info <span class="token operator">=</span> yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>emp_info<span class="token punctuation">)</span> <span class="token comment"># 'age: 18\nis_married: true\nname: ddf\nsite: null\n'</span>yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>yaml_emp_info<span class="token punctuation">,</span> Loader<span class="token operator">=</span>yaml<span class="token punctuation">.</span>FullLoader<span class="token punctuation">)</span> <span class="token comment"># &#123;'age': 18, 'is_married': True, 'name': 'ddf', 'site': None&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文档-2"><a href="#参考文档-2" class="headerlink" title="参考文档"></a><a href="https://yaml.org/">参考文档</a></h3><h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World !"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件-3"><a href="#文件-3" class="headerlink" title="文件"></a>文件</h3><ul><li>Shell文件的文件类型是 .sh</li></ul><h3 id="开发语言与Shell"><a href="#开发语言与Shell" class="headerlink" title="开发语言与Shell"></a>开发语言与Shell</h3><h3 id="参考文档-3"><a href="#参考文档-3" class="headerlink" title="参考文档"></a><a href="https://www.runoob.com/linux/linux-shell.html">参考文档</a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用技术知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT操作篇</title>
      <link href="/2023/05/29/git-cao-zuo-pian/"/>
      <url>/2023/05/29/git-cao-zuo-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是目前世界上最先进的分布式版本控制系统。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><a href="https://git-scm.com/download/">下载Git</a><br>1.linux上安装Git<br>2.windows上安装Git<br>3.mac上安装Git<br><code>brew install git</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="设定自己机器的全局变量"><a href="#设定自己机器的全局变量" class="headerlink" title="设定自己机器的全局变量"></a>设定自己机器的全局变量</h4><p><code>git config --global user.name &quot;Your Name&quot;</code>—— 设定用户名字，随便写<br><code>git config --global user.email &quot;email@example.com&quot;</code> —— 设定用户邮箱，随便写<br>注意git config命令的–global参数，用了这个参数，表明你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h4 id="查看自己机器的配置信息"><a href="#查看自己机器的配置信息" class="headerlink" title="查看自己机器的配置信息"></a>查看自己机器的配置信息</h4><p>config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-&gt;global-&gt;local  底层配置会覆盖顶层配置 分别使用–system&#x2F;global&#x2F;local 可以定位到配置文件<br><code>git config --system --list</code> —— 查看系统config<br><code>git config --global  --list</code> —— 查看当前用户（global）配置<br><code>git config --local  --list</code> —— 查看当前仓库配置信息<br><code>git config --list </code> —— 查看全配置</p><h4 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h4><p><code>git config --global credential.helper wincred </code> —— 凭证存储<br><code>git config --global color.ui true </code> —— 开启颜色支持<br><code>git config --global core.quotepath false </code> —— 支持utf-8编码</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><code>git config --global --replace-all user.email &quot;输入你的邮箱&quot; </code><br><code>git config --global --replace-all user.name &quot;输入你的用户名&quot;</code></p><h3 id="创建版本库（repository）"><a href="#创建版本库（repository）" class="headerlink" title="创建版本库（repository）"></a>创建版本库（repository）</h3><blockquote><p>mkdir directory —— 创建一个空目录<br>cd directory<br>windows下目录最好不用中文<br>git init —— 初始化仓库</p></blockquote><h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>git status</p><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><p>touch ddf.txt<br><code>git add ddf.txt</code> —— 把文件添加到仓库<br><code>git add -A</code> —— 添加所有文件到仓库<br>这里如果有警告则添加git config –global core.autocrlf false；原因是路径中存在 &#x2F; 的符号转义问题，false就是不转换符号默认是true，相当于把路径的 &#x2F; 符号进行转义，这样添加的时候就有问题。<br><code>git commit -m &quot;first&quot;</code> —— 把文件提交到仓库<br>git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="回溯操作"><a href="#回溯操作" class="headerlink" title="回溯操作"></a>回溯操作</h3><p>git dif —— 查看difference，即查看修改内容<br>git log —— 查看提交历史，以便确定要回退到哪个版本。<br>记住：commit_id（版本号）<br><code>git reset --hard HEAD^</code> —— HEAD指向的版本就是当前版本，该指令即为回到上个操作版本<br><code>git reset --hard commit_id</code> —— 回溯到相应版本<br><code>git reflog</code> —— 查看命令历史，以便确定要回到未来的哪个版本。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p> <code>git checkout -- ddf.txt</code></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>rm ddf.txt</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><ol><li>通过https克隆</li><li>通过ssh克隆</li></ol><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>git push —— 用于将本地更改推送到远程仓库<br><code>git push -u origin master</code> —— 第一次推送master分支的所有内容<br>git remote —— 仓库关联<br><code>git remote -v</code> —— 列出所有远程仓库的名称和URL<br><code>git remote add</code> —— 用于添加远程仓库<br><code>git remote remove</code> —— 用于删除远程仓库</p><h3 id="从远程添加到本地"><a href="#从远程添加到本地" class="headerlink" title="从远程添加到本地"></a>从远程添加到本地</h3><p><code>git fetch</code> —— 从远程仓库获取更新,但并不会合并更改<br><code>git pull</code> —— 从远程仓库获取更新,并且自动合并远程仓库的更改到本地仓库</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p>git merge —— 合并其他分支到当前分支<br>git cherry-pick —— 选择并合并其他分支的提交到当前分支</p><h3 id="更多指令"><a href="#更多指令" class="headerlink" title="更多指令"></a><a href="https://git-scm.com/docs">更多指令</a></h3><h2 id="融合进IDE"><a href="#融合进IDE" class="headerlink" title="融合进IDE"></a>融合进IDE</h2><h3 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h3><ul><li>基本开发流程<ul><li>基于远程master分支新建功能&#x2F;修复分支xxx git checkout -b xxx origin&#x2F;master</li><li>xxx分支提交代码commit并推送push</li><li>拉取所有分支提交fetch</li><li>切换到环境分支git checkout(以远程为主会更新本地环境分支)并merge xxx分支</li><li>推送远程push</li></ul></li><li>操作图片<br><img src="/img/git5.png" alt="git新建分支"><br><img src="/img/git1.png" alt="常规git操作"><br><img src="/img/git2.png" alt="git-merge操作"><br><img src="/img/git3.png" alt="git操作"><br><img src="/img/git4.png" alt="git-reset操作"></li></ul><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3><p>类似pycharm</p><h3 id="vs-code"><a href="#vs-code" class="headerlink" title="vs code"></a>vs code</h3><h2 id="git使用规范"><a href="#git使用规范" class="headerlink" title="git使用规范"></a>git使用规范</h2><p>整体分支包括环境分支-主分支(master)、环境分支-测试分支(test)、环境分支-开发分支(dev)、功能分支(features)、修复分支(hotfixs)。<br>所有分支均基于主分支开发，master、test、dev三分支互不合并，三种环境分支均合并功能分支或者修复分支。<br>正常途径皆基于merge合并分支，如出现环境分支相差过大，可基于cherry-pick合并提交，后续以主分支为主，拆分各项分支。<br>旧分支使用git规范时，可以使用主分支为主，创建不同版本的功能分支、修复分支，然后cherry-pick不同版本的提交至对应的分支，最后新建dev、test分支，并合并对应的features、hotfixs分支。</p>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 仓库管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh的基本操作</title>
      <link href="/2023/05/29/ssh-de-ji-ben-cao-zuo/"/>
      <url>/2023/05/29/ssh-de-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="ssh的基本操作"><a href="#ssh的基本操作" class="headerlink" title="ssh的基本操作"></a>ssh的基本操作</h2><h3 id="ssh服务器-文字接口连接服务器"><a href="#ssh服务器-文字接口连接服务器" class="headerlink" title="ssh服务器(文字接口连接服务器)"></a>ssh服务器(文字接口连接服务器)</h3><p>SSH是Secure Shell Protocol(安全的壳程序协议)的简写。</p><ul><li>公钥:id_rsa.pub<ul><li>很多服务器都是需要认证的，ssh认证是其中的一种。在客户端生成公钥，把生成的公钥添加到服务器，你以后连接服务器就不用每次都输入用户名和密码了。</li><li>很多git服务器都是用ssh认证方式，你需要把你生成的公钥发送给代码仓库管理员，让他给你添加到服务器上，你就可以通过ssh自由地拉取和提交代码了。</li></ul></li><li>私钥:id_rsa</li><li>启动SSH服务(默认已经启动)<br><code>/etc/init.d/sshd restart</code></li></ul><h3 id="查看本机ssh公钥，生成公钥"><a href="#查看本机ssh公钥，生成公钥" class="headerlink" title="查看本机ssh公钥，生成公钥"></a>查看本机ssh公钥，生成公钥</h3><h4 id="查看ssh公钥方法："><a href="#查看ssh公钥方法：" class="headerlink" title="查看ssh公钥方法："></a>查看ssh公钥方法：</h4><ol><li>通过命令窗口 cat ~&#x2F;.ssh&#x2F;id_rsa.pub<ul><li>打开你的终端窗口</li><li>进入.ssh 目录：cd ~&#x2F;.ssh</li><li>找到id_rsa.pub文件：ls</li><li>查看公钥：cat id_rsa.pub 或者 vim id_rsa.pub</li></ul></li><li>通过图形界面<br>打开User下面的.ssh文件夹，打开它里面的 id_rsa.pub 文件</li></ol><h4 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h4><ol><li>生成公钥了：<code>ssh-keygen -t rsa</code></li><li>接着会确认存放公钥的地址，默认就是上面说的路径，直接enter键确认</li><li>接着会要求输入密码和确认密码，如果不想设置密码直接不输入内容 按enter键</li></ol><h3 id="通过ssh连接服务器"><a href="#通过ssh连接服务器" class="headerlink" title="通过ssh连接服务器"></a>通过ssh连接服务器</h3><p><code>ssh 账号@主机ip</code></p><h3 id="给服务器添加公钥-阿里"><a href="#给服务器添加公钥-阿里" class="headerlink" title="给服务器添加公钥(阿里)"></a>给服务器添加公钥(阿里)</h3><p>cd ~&#x2F;.ssh<br>vim authorized_keys 然后在里面加入自己本地的公钥</p><h3 id="远程添加"><a href="#远程添加" class="headerlink" title="远程添加"></a>远程添加</h3><p>文件异地直接复制:SCP<br>scp id_rsa.pub root@主机地址:~&#x2F;.ssh&#x2F;ddf.pub<br>cat ddf.pub &gt;&gt; authorized_keys 累加进<br><img src="/img/scp1.png" alt="操作图片">                  </p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p><code>ssh -T url</code>测试是否设置成功<br>logout</p><h2 id="各种图形化软件"><a href="#各种图形化软件" class="headerlink" title="各种图形化软件"></a>各种图形化软件</h2><p>windows: <a href="https://www.xshell.com/zh/xshell/">Xshell</a><br>mac: <a href="https://royalapps.com/ts/mac/features">Royal TSX</a><br>linux: <a href="https://termius.com/">Termius</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包管理更换国内镜像源</title>
      <link href="/2023/05/29/ge-chong-bao-guan-li-gong-ju/"/>
      <url>/2023/05/29/ge-chong-bao-guan-li-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="npm换国内镜像源"><a href="#npm换国内镜像源" class="headerlink" title="npm换国内镜像源"></a>npm换国内镜像源</h3><p>单独使用:<code>npm install --registry=https://registry.npm.taobao.org xxx</code><br>永久使用:<br>1.打开npmrc文件（nodejs\node_modules\npm\npmrc，没有的话可以使用git命令行建一个( touch .npmrc)，用cmd命令建会报错）<br>2.增加 registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>  即可。<br>3.或者在命令行直接设置<code>npm config set registry https://registry.npm.taobao.org</code><br>4.配置后可通过下面方式来验证是否成功<code>npm config get registry</code></p><h3 id="pip换国内镜像源"><a href="#pip换国内镜像源" class="headerlink" title="pip换国内镜像源"></a>pip换国内镜像源</h3><p>单独使用:<code>pip install -i http://pypi.doubanio.com/simple xxx</code><br>永久使用:<br>1.打开用户主目录&#x2F;pip&#x2F;pip.ini,如果没有就创建<br>2.增加</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[global]# index-url = http://pypi.doubanio.com/simple/index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host = mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="go设置国内"><a href="#go设置国内" class="headerlink" title="go设置国内"></a>go设置国内</h3><p>go env -w GOPROXY&#x3D;<a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用技术知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
